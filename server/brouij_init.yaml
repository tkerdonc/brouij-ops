---
- hosts: mainserver
  tasks:
    - name: Create remote artifact directory
      become: true
      file:
        path: /opt/custom
        state: directory
        owner: ubuntu
        group: ubuntu
    - name: build frontend
      delegate_to: localhost
      shell: "cd modules/brouij-gallery; OUT_FILE=../../resources/gallery/main.js make"
    - name: push artifacts
      synchronize:
        dirs: true
        mode: push
        src: "resources"
        dest: "/opt/custom"
    - name: Install aptitude
      become: true
      apt:
        pkg:
          - "aptitude"
    - name: Update os packages
      become: true
      apt:
        update_cache: true
        upgrade: safe
    - name: Install dependencies
      become: true
      apt:
        pkg:
          - "docker.io"
          - "ntp"
          - "python3-passlib"
          - "python3-pip"
          - "openssl"
    - name: Add the ubuntu user to docker group
      become: true
      user:
        name: ubuntu
        groups: docker
        append: true
    - name: install python docker binding
      pip:
        name: "docker-py"
      become: true
    - pip:
        name: "certbot"
      become: true
    - name: Setup certificates
      become: true
      shell: "certbot certonly --standalone \
                               --agree-tos \
                               --preferred-challenges http \
                               -m {{ ops_mail }} \
                               --keep \
                               -d {{ servername }}"
      with_items:
        - "{{ dns_name }}"
        - "graf.{{ dns_name }}"
      loop_control:
        loop_var: servername
    - name: Enable services
      become: true
      shell: "systemctl enable docker && systemctl start docker"
    - name: Set timezone
      become: true
      timezone:
        name: Europe/Paris
    - name: init http passwords
      htpasswd:
        path: "/opt/custom/htpasswd.grafana"
        name: "{{ graf_admin }}"
        password: "{{ graf_password }}"
    - name: create non admin htpasswd entries
      with_items: "{{ non_admin_users }}"
      loop_control:
        loop_var: account
      htpasswd:
        path: "/opt/custom/htpasswd.grafana"
        name: "{{ account.name }}"
        password: "{{ account.password }}"
    - name: Create docker network
      docker_network:
        name: docker_network
        state: present
        force: true
    - name: Run influxdb container
      docker_container:
        name: influx
        image: influxdb:1.8.1
        state: "started"
        restart_policy: "unless-stopped"
        recreate: true
        env:
           INFLUXDB_UDP_ENABLED: "true"
           INFLUXDB_UDP_BIND_ADDRESS: "0.0.0.0:8125"
           INFLUXDB_UDP_DATABASE: "brewing"
           INFLUXDB_DB: "brewing"
        ports:
          - "8125:8125/udp"
        networks:
          - name: docker_network
        log_driver: json-file
        log_options:
          max-size: "50m"
          max-file: "3"
    - name: Run grafana container
      docker_container:
        name: grafana
        image: grafana/grafana:7.0.3
        state: "started"
        restart_policy: "unless-stopped"
        recreate: true
        env:
          GF_SECURITY_ADMIN_USER: "{{ graf_admin }}"
          GF_SECURITY_ADMIN_PASSWORD: "{{ graf_password }}"
          GF_USERS_ALLOW_SIGN_UP: "false"
        ports:
          - "3000:3000"
        networks:
          - name: docker_network
        volumes:
          - "/opt/custom/resources/grafana/provisioning:/etc/grafana/provisioning:ro"
          - "/opt/custom/resources/grafana/dashboards:/var/lib/grafana/dashboards:ro"
        log_driver: json-file
        log_options:
          max-size: "50m"
          max-file: "3"
    - name: Run nginx container
      docker_container:
        name: nginx
        image: nginx:1.18
        env:
          SERVER_NAME: "{{ dns_name }}"
        command:
          - "/opt/custom/entrypoint.sh"
        restart_policy: "unless-stopped"
        recreate: true
        state: "started"
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - "/etc/letsencrypt/live/{{ dns_name }}/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro"
          - "/etc/letsencrypt/live/{{ dns_name }}/privkey.pem:/etc/nginx/certs/privkey.pem:ro"
          - "/etc/letsencrypt/live/graf.{{ dns_name }}/fullchain.pem:/etc/nginx/certs/graf.fullchain.pem:ro"
          - "/etc/letsencrypt/live/graf.{{ dns_name }}/privkey.pem:/etc/nginx/certs/graf.privkey.pem:ro"
          - "/opt/custom/resources/nginx/nginx.conf:/etc/nginx/conf.d/default.template:ro"
          - "/opt/custom/resources/nginx/nginx_entrypoint.sh:/opt/custom/entrypoint.sh:ro"
          - "/opt/custom/htpasswd.grafana:/etc/nginx/conf/htpasswd.grafana:ro"
          - "/opt/custom/resources/gallery:/www/gallery/:ro"
        networks:
          - name: docker_network
        log_driver: json-file
        log_options:
          max-size: "50m"
          max-file: "5"
    - name: create non admin grafana users
      with_items: "{{ non_admin_users }}"
      loop_control:
        loop_var: account
      uri:
        url: "http://localhost:3000/api/admin/users"
        user: "{{ graf_admin }}"
        password: "{{ graf_password }}"
        method: POST
        body:
          name: "{{ account.name }}"
          login: "{{ account.name }}"
          password: "{{ account.password }}"
          isGrafanaAdmin: "false"
        force_basic_auth: yes
        status_code:
          - 200
          - 201
        body_format: json
